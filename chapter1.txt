Finding Counterexamples
1-1. [3] Show that a + b can be less than min(a, b).

min() The static function Math. min() returns the lowest-valued number passed into it
a = -1
b = -0.1

min(-1, -0.1) = -1
-1 +(-0.1) = -1.1


1-2. [3] Show that a × b can be less than min(a, b).
a = 2
b = -1

min(-1, -0.1) = -1
2 *(-1) = -1.1


1-3. [5] Design/draw a road network with two points a and b such that the fastest
route between a and b is not the shortest route.

  a -------------------- b      a --> b seems the fastest but if it is a roud of limited low speed and C --> D is a highway and from  
  /                       \     a-->C and from D-->b just getting on of the highway then a-->b is not necessarily the fastest although it is shortest
C-------------------------- D


1-4. [5] Design/draw a road network with two points a and b such that the shortest
route between a and b is not the route with the fewest turns.

a___   _   __b  vs c___   _________d
    |_| |_|            | |
                       | |
                       |_|
1-5. [4] The knapsack problem is as follows: given a set of integers S = {s1, s2,...,sn},
and a target number T, find a subset of S that adds up exactly to T. For example, there exists a subset within S = {1, 2, 5, 9, 10} that adds up to T = 22
but not T = 23.
Find counterexamples to each of the following algorithms for the knapsack problem. That is, give an S and T where the algorithm does not find a solution that
leaves the knapsack completely full, even though a full-knapsack solution exists.
(a) Put the elements of S in the knapsack in left to right order if they fit, that
is, the first-fit algorithm.
T = 2
S = {1, 2}

(b) Put the elements of S in the knapsack from smallest to largest, that is, the
best-fit algorithm.
T = 2
S = {1, 2}

(c) Put the elements of S in the knapsack from largest to smallest.
T = 5
S = {3, 4, 2}

1-6. [5] The set cover problem is as follows: given a set S of subsets S1,...,Sm of
the universal set U = {1, ..., n}, find the smallest subset of subsets T ⊆ S such
that ∪ti∈T ti = U. For example, consider the subsets S1 = {1, 3, 5}, S2 = {2, 4},
S3 = {1, 4}, and S4 = {2, 5}. The set cover of {1,..., 5} would then be S1 and
S2.
Find a counterexample for the following algorithm: Select the largest subset for
the cover, and then delete all its elements from the universal set. Repeat by
adding the subset containing the largest number of uncovered elements until all
are covered.

U =  {123456}

S1 = {1,2}
S2 = {2,3,5}
S3 = {3,4}
S4 = {5,6}


The algorithm would pick S2 = {2,3,5} and then S1 = {1,2}, then S3 = {3,4}, then S4 = {5,6} but
The least subsets would be: S1, S3, S4

1-7. [5] The maximum clique problem in a graph G = (V,E) asks for the largest
subset C of vertices V such that there is an edge in E between every pair of
vertices in C. Find a counterexample for the following algorithm: Sort the
vertices of G from highest to lowest degree. Considering the vertices in order
of degree, for each vertex add it to the clique if it is a neighbor of all vertices
currently in the clique. Repeat until all vertices have been considered.


C = (V.....Vn)

sorted_V = {5,4,3,2,1}
    1
  *-------*
 3| \   / |2
  |   /   |
  | /   \ |
  *-------*-------*
      4       5
It would start iwth 5 and add only 4 so final is a subset of single V --> 5 
BUT could be 1,2,3,4 which contains more vertices V connecting more edges



Proofs of Correctness


1-8. [3] Prove the correctness of the following recursive algorithm to multiply two
natural numbers, for all integer constants c ≥ 2.
Multiply(y, z)
if z = 0 then return(0) else
return(Multiply(cy, [z/c]) + y · (z mod c))


I DO NOT GET IT NOT EVEN FROM THE WEB https://stackoverflow.com/questions/34504120/where-to-start-when-proving-correctness-of-algorithms
natural numbers N = {0, 1, 2, ........, n} 

mathematical induction????????????????????
Multiply((cy, [z/c]) + y · (z mod c))



1-9. [3] Prove the correctness of the following algorithm for evaluating a polynomial
anxn + an−1xn−1 + · · · + a1x + a0.
Horner(a, x)
p = an
for i from n − 1 to 0
p = p · x + ai
return p

NO IDEA https://github.com/jhallock7/Algorithm_Exercises/blob/master/Chapter%201%20-%20Intro%20to%20Algorithm%20Design.ipynb

1-10. [3] Prove the correctness of the following sorting algorithm.
Bubblesort (A)
for i from n to 1
for j from 1 to i − 1
if (A[j] > A[j + 1])
swap the values of A[j] and A[j + 1]


1-11. [5] The greatest common divisor of positive integers x and y is the largest integer
d such that d divides x and d divides y. Euclid’s algorithm to compute gcd(x, y)
where x > y reduces the task to a smaller problem:
gcd(x, y) = gcd(y, x mod y)
Prove that Euclid’s algorithm is correct.
Induction



https://www.youtube.com/watch?v=jLL3kFsLh-Y&ab_channel=mathsgotserved 
11 Proof by induction Σ k =n(n+1)/2 maths for all positive Year 12 hsc Extension 1